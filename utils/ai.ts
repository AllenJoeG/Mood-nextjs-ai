import { PromptTemplate } from 'langchain/prompts'
import {OpenAI} from 'langchain/llms/openai'
import { StructuredOutputParser, OutputFixingParser } from 'langchain/output_parsers'
import { Document } from 'langchain/document'
import { loadQARefineChain } from 'langchain/chains'
import { MemoryVectorStore } from 'langchain/vectorstores/memory'
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import z from 'zod'

//Where we define the format of the response to be parsed, and provide prompt engineering to the LLM.
const parser = StructuredOutputParser.fromZodSchema(
  z.object({
    mood: z.string().describe('The mood of the person writing the content based on the journal entry.'),
    subject: z.string().describe('The subject of the journal entry.'),
    summary: z.string().describe('A short summary of the topic of the journal entry.'),
    negative: z.boolean().describe('Is the overall mood of this journal entry negative? (i.e. does it contain negative or positive sentiment?).'),
    color: z.string().describe('Hexadecimal code of a color representing the mood of the journal entry. (i.e. #40ff76 green for happy, #e35669 reddish for passionate.'),
    sentimentScore: z.number().describe('sentiment of the text and rated on a scale from -10 to 10, where -10 is extremely negative, 0 is neutral, and 10 is extremely positive.'),
  })
)

const getPrompt = async (content) => {
  const formatted_instructions = parser.getFormatInstructions()

  const prompt = new PromptTemplate({
    template: 'Analyze the following journal entry. Follow the instructions and format your response to match the format instructions, no matter what! \n {formatted_instructions} \n {entry}',
    inputVariables: ['entry'],
    partialVariables: { formatted_instructions },
  })

  const input = await prompt.format({
    entry: content
  })

  return input
}

export const analyze = async (content) => {
  //model instance: temperature is a degree of responsiveness range 0 to 1. higher more creative associative, lower more rational logical coherent.
  const model = new OpenAI({temperature: 0, modelName: 'gpt-3.5-turbo'})
  const input = await getPrompt(content)
  const result = await model.call(input)

  try {
    return parser.parse(result)
  } catch(e) {
    console.log("Error parsing the zod parse, ", e)
  }
}


//Handles question input, submission to openAI, vector mapping, inmemory storage of vectors, similarity search, and return
export const qa = async (question, entries) => {
  const docs = entries.map((entry) => {
    return new Document({
      pageContent: entry.content,
      metadata: { source: entry.id, date: entry.createdAt },
    })
  })

  //Hang onto the this chain of methods for future reference it's super powerful langchain implementations
  
  const model = new OpenAI({ temperature: 0, modelName: 'gpt-3.5-turbo'})
  const chain = loadQARefineChain(model)

  //embeddings are a group of vectors, this will populate the vectors generated by OpenAI
  const embeddings = new OpenAIEmbeddings()

  //vector store for hanging onto the docs and embeddings
  const store = await MemoryVectorStore.fromDocuments(docs, embeddings)

  //performs the similarity assessment 
  const relevantDocs = await store.similaritySearch(question)
  const res = await chain.call({
    input_documents: relevantDocs,
    question,
  })

  return res.output_text
}

//
//
// Rudimentary prompt engineering. Compare to zod's prepared that is logged on L33.
  // await analyze(`I'm going to give you a journal entry, I want you to analyze for a few things. I need the mood, 
  //   a summary, the subject of the entry, and a color representing the mood. You need to respond back with formatted 
  //   JSON like this: {"mood": "", "subject": "", "color": "", "negative": ""}.

  //   Journal entry:
  //   "And suddenly the google auth worked with Open AI and I didn't do anything different and it worked. Cool."
  //   `)